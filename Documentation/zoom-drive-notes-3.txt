Suggested changed to Zoom Drive control system code

======================================================================================
OPEN ITEMS
======================================================================================

------------------------------------
- Update arm position and exclusion tuning
------------------------------------
	X A) Set height tuning

	# B) Set min allowed extension as a function of lift angle
		NOT USED ANYWHERE.

	# C) Set min allowed lift angle as a function of extension
		NOT USED ANYWHERE

	X D) Review and look at other arm exclusion data...

	E) Test all presets.  (Arm needs to be physically fixed first!!)

------------------------------------
- Add Drive Travel PID Reset
------------------------------------
	A) Reset Drive travel PID when speed demand is zero (or very close to zero.)

	- Look at differential drive execute code -- from the original robot project
	Copy the logic that detects when the speed demand (setpoint) is 
	close to zero.  (Use close to zero instead of exactly zero.)  This is sent 
	to an edge on.  The result is used to reset the PID.  There
	is a reset input on the PID.
------------------------------------
- Test auto drive straight routine
------------------------------------
	A) ActDriveStraight and ActDriveStraightWeird calculate the distance error
	using the same logic.  Make this logic a VI that both call.  This way if
	the error calculation needs to change the change only is made in one place.

	- create new ActDriveStraightXXXX (or whatever name you give it) routine
		to calculate drive straight distance error.

	- Add network table writes for target distance, distance 
	error, and first time.  Watch these while testing 
 
	B) Test auto drive straight and correct as needed.

	- Things to look for:
		- is the target distance set to the desired travel distance + 
		current distance?  (If not make certain that FirstTime is being
		set.)  
		- are the wheel distances increasing?  (If not then the error
		logic may (will) have to encorporate the wheel angle when calculating
		the difference error.) 
		- is the error decreasing? (Look at error calculation to make certain
		sign is correct.)

------------------------------------
- Test auto drive turn routine
------------------------------------
	A) Test auto drive turn and correct as needed.

	- Things to look for:
		- is it going in the correct direction ?
		- is it going as fast as desired.  (the original uses Ft/Sec.  
		The new swerve uses DEG/SEC.  Perhaps a constant should be
		calculated to convert from Ft/SEC to DEG/SEC.  -- NOTE  do
		this using the circumference at the wheel position. 

------------------------------------
- Tune Drive travel control
------------------------------------
	A) Re-tune travel feedforward -- Ks, Kv
		(There is a helper version of the Drive Execute to assist with
		this.)
		- use the result to calculate Kn
		- update Drive Execute and test Drive Execute functions with
		results.

	B) Tune travel feedforward -- Ka
		(There is a helper version of the Drive Execute to assist with
		this.)
		- update Drive Execute and test Drive Execute with results.
		- test! 		

	B) Update travel PID tuning
		(There is a helper version of the Drive Execute to assist with
		this.)
		- This may have to be done outside..... or someplace where a long
		staight level run can be made.  It might be possible to test this
		while the robot is moving in a circle....

------------------------------------
- Test Auto-Balance
------------------------------------

------------------------------------
- Test follow trajectory
------------------------------------


------------------------------------
- Tune Drive Spin
------------------------------------




*****************
FUTURE IDEAS...
*****************
NOT IN ANY PARTICULAR ORDER

------------------------------------
- Add direction angle to drive straight act, and auto routines.
------------------------------------

------------------------------------
- Add robot orientation options (follow traj, keep, specific end orientation)
to follow trajectory.
------------------------------------
	
------------------------------------
- ZEKEs idea to implement avoid routine
------------------------------------
	- define what is wanted.
	- write code to execute it.
	- update human execute to call new routine.

------------------------------------
- Revise module spin control to use both encoders
------------------------------------

	- drive module read -- first time calc offset.
			- apply offset to other encoder
			- calc encoder difference and report.

	- drive module control
			- use average of both encoders.
			- make deadband smaller.

------------------------------------
- Revise drive read and control code to move network table writes to globals then
	to separate network module.
------------------------------------


=====================================================================================
COMPLETED ITEMS
=====================================================================================
------------------------------------
- Get trajectory following working.
------------------------------------
	A) The trajectory following routines need some state, and
	positions data from the drive system.

	X DriveExecute
		- make array of ModuleStates
		- make array of ModulePositions
		- create indicators for both of these.

	X DriveGlobals
		- copy DriveExecute ModulePositons and ModuleStates
			indicators into DriveGlobals save

	X DriveGetModulePositions 
		- create  -- reads global
	
	X DriveGetModuleStates 
		- create -- reads globals

	X DriveExecute 
		- write module states and positions to globals.
		remove module states and module positions indicators

	B) The vision system calculates the robots absolute position
	on the field.  This needs to be changed to use the Swerve Drive
	Pose Estimator 2 instead of the Differential Drive Pose Estimator

	X VisionExecute
		- replace diff drive pose est with swerve drive pose est 2
		( the menu item needs to be fixed for this to insert 
		the contents of the macro...)  Menu item under Kine/Odom.

	C) Follow Trajectory common (used by absolute and relative )

	X actFollowTrajectoryCommon 
		- Create from actFollowTrajectoryAbsolute.
		- inputs: 
			- robot pose (comes from odometry)
			- trajectory
			- first time boolean
		- outputs
			- vX
			- vY
			- vAngular
			- done
		- replace Ramsete control with Holonomic Execute Trajectory

	D) Follow absolute trajectory

	X actFollowAbsoluteTrajectory
		- replace ramsete control with actFollowTrajectoryCommon

	E) Follow relative trajectory

	X actFollowTrajectory
		- rename to actFollowRelativeTrajectory
			(it might be easier to delete and copy
			 actFollowAbsoluteTrajectory)
		- replace ramsete control with actFollowTrajectoryCommon
		- implement swerve drive odometry update.
		- implement swerve drive odometry new (when firstTime is true)
			otherwise pass current odometry back through feedback
			node. )

	F) Update auto routine to follow trajectory.

	X- AutoFollowTrajectory
		- rename to AutoFollowRelativeTrajectory
		- update for swerve demand
		(estimated change time 5 minutes)

	X- AutoFollowAbsoluteTrajectory
		- create from AutoFollowRelativeTrajectory.
		- use actfollowrelativeTrajectory.
		(estimated change time 5 minutes)

	G) Revise Act Make Trajecotry routine for swerve drive
		(Note that this makes absolute trajectories.
		However -- a trajectory that starts at 0,0,0 is
		also a relative trajectory.)

	X- ActMakeTrajectory
		- remove diff drive kine constraint, replace with
		swerve drive kine constraint
		(estimated change time 15 minutes)
	
	H) Create an Auto routine to test relative trajectory following.

	X- Auto_Routine_TestTrajectory.
		- create from some other auto routine
		- create a simple trajectory
		- execute it.
		(estimated change time 10 minutes)

	X- Autonomous Independent
		- add Auto_Routine_TestTrajectory
		(estimated change time 10 minutes)

	X- Begin
		- add new auto routine to list.
		(estimated change time 5 minutes)

------------------------------------
- Auto test routines for drive straight and turn
------------------------------------
	A) Make test auto routines for drive straight and turn auto

	X Autonomous Independent
		- add new auto routine case "TestDriveStraight" to call
			AutoDriveStraight
			say go 5 feet at 5 ft/sec with max time of 20 sec
		- add new auto routine case "TestDriveTurn" to call
			AutoTurn
			say 120 deg at 5 ft/sec with max time of 100 sec

	X Begin
		- add the new auto routines to the list.

=====================================================================================
MISCELLANEOUS INFORMATION
=====================================================================================
updated files

	Drive
	- driveGlobal - add module states, module positions
	- driveExecute - write module states, positions
	- driveGetModulePositions - new
	- driveGetModuleStates - new

	vision
	- VisionExecute

	act
	- actMakeTrajectory
	- actFollowAbsoluteTrajectory
	- actFollowRelativeTrajectory (renamed)
	- actFollowTrajectoryCommon

	auto
	- autoBegin - move auto list into this routine
	- Auto_Routine_TestTrajectory - create and test 
		separate trajectory
	- AutoFollowAbsoluteTrajectory
	- AutoFollowRelativeTrajectory
