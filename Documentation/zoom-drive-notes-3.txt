Suggested changed to Zoom Drive control system code

------------------------------------
- Get trajectory following working.
------------------------------------
	A) The trajectory following routines need some state, and
	positions data from the drive system.

	X DriveExecute
		- make array of ModuleStates
		- make array of ModulePositions
		- create indicators for both of these.

	X DriveGlobals
		- copy DriveExecute ModulePositons and ModuleStates
			indicators into DriveGlobals save

	X DriveGetModulePositions 
		- create  -- reads global
	
	X DriveGetModuleStates 
		- create -- reads globals

	X DriveExecute 
		- write module states and positions to globals.
		remove module states and module positions indicators

	B) The vision system calculates the robots absolute position
	on the field.  This needs to be changed to use the Swerve Drive
	Pose Estimator 2 instead of the Differential Drive Pose Estimator

	X VisionExecute
		- replace diff drive pose est with swerve drive pose est 2
		( the menu item needs to be fixed for this to insert 
		the contents of the macro...)  Menu item under Kine/Odom.

	C) Follow Trajectory common (used by absolute and relative )

	X actFollowTrajectoryCommon 
		- Create from actFollowTrajectoryAbsolute.
		- inputs: 
			- robot pose (comes from odometry)
			- trajectory
			- first time boolean
		- outputs
			- vX
			- vY
			- vAngular
			- done
		- replace Ramsete control with Holonomic Execute Trajectory

	D) Follow absolute trajectory

	X actFollowAbsoluteTrajectory
		- replace ramsete control with actFollowTrajectoryCommon

	E) Follow relative trajectory

	X actFollowTrajectory
		- rename to actFollowRelativeTrajectory
			(it might be easier to delete and copy
			 actFollowAbsoluteTrajectory)
		- replace ramsete control with actFollowTrajectoryCommon
		- implement swerve drive odometry update.
		- implement swerve drive odometry new (when firstTime is true)
			otherwise pass current odometry back through feedback
			node. )

	F) Update auto routine to follow trajectory.

	- AutoFollowTrajectory
		- rename to AutoFollowRelativeTrajectory
		- update for swerve demand
		(estimated change time 5 minutes)

	- AutoFollowAbsoluteTrajectory
		- create from AutoFollowRelativeTrajectory.
		- use actfollowrelativeTrajectory.
		(estimated change time 5 minutes)

	G) Revise Act Make Trajecotry routine for swerve drive
		(Note that this makes absolute trajectories.
		However -- a trajectory that starts at 0,0,0 is
		also a relative trajectory.)

	- ActMakeTrajectory
		- remove diff drive kine constraint, replace with
		swerve drive kine constraint
		(estimated change time 15 minutes)
	
	H) Create an Auto routine to test relative trajectory following.

	- Auto_Routine_TestTrajectory.
		- create from some other auto routine
		- create a simple trajectory
		- execute it.
		(estimated change time 10 minutes)

	- Autonomous Independent
		- add Auto_Routine_TestTrajectory
		(estimated change time 10 minutes)

	- Begin
		- add new auto routine to list.
		(estimated change time 5 minutes)

------------------------------------
- Auto test routines for drive straight and turn
------------------------------------
	A) Make test auto routines for drive straight and turn auto

	- Autonomous Independent
		- add new auto routine case "TestDriveStraight" to call
			AutoDriveStraight
			say go 5 feet at 5 ft/sec with max time of 20 sec
		- add new auto routine case "TestDriveTurn" to call
			AutoTurn
			say 120 deg at 5 ft/sec with max time of 100 sec

	- Begin
		- add the new auto routines to the list.
------------------------------------
- Update arm position and exclusion tuning
------------------------------------
	A) Set height tuning

	B) Set min allowed extension as a function of lift angle

	C) Set min allowed lift angle as a function of extension

	D) Review and look at other arm exclusion data...

------------------------------------
- Update drive travel speed PID
------------------------------------
	A) Disable PID when speed demand is zero (or very close to zero.)

	B) Update travel PID tuning

------------------------------------
- Tune spin control, possibly add feedforward
------------------------------------

------------------------------------
- Test and revise
------------------------------------
	
FUTURE THINGS.....

------------------------------------
- ZEKEs idea to implement avoid routine
------------------------------------
	- define what is wanted.
	- write code to execute it.
	- update human execute to call new routine.

------------------------------------
- Revise module spin control to use both encoders
------------------------------------

	- drive module read -- first time calc offset.
			- apply offset to other encoder
			- calc encoder difference and report.

	- drive module control
			- use average of both encoders.
			- make deadband smaller.

------------------------------------
- Revise read and control code to move network table writes to globals then
	to separate network module.
------------------------------------



updated files

	Drive
	- driveGlobal - add module states, module positions
	- driveExecute - write module states, positions
	- driveGetModulePositions - new
	- driveGetModuleStates - new

	vision
	- VisionExecute

	act
	- actMakeTrajectory
	- actFollowAbsoluteTrajectory
	- actFollowRelativeTrajectory (renamed)
	- actFollowTrajectoryCommon

	auto
	- autoBegin - move auto list into this routine
	- Auto_Routine_TestTrajectory - create and test 
		separate trajectory
	- AutoFollowAbsoluteTrajectory
	- AutoFollowRelativeTrajectory
